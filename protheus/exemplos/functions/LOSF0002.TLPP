#Include "topconn.ch"

/*/{Protheus.doc}  LOSF0002
Rotina JOB FAT CTe Via Schedule
@type  User Function
@author Andre Vicente 
@since 15/10/2025
@version version
@param nil
@return nil
@Uso: 
@see (links_or_references)
/*/
User Function LOSF0002()


    Local aArea     := FWGetArea()
    Local cAutoEmp  := "01"
    Local cAutoFil  := "01010001"
    Local cAutoAmb  := "FAT"
    Local aTables := {"SC5","SC6","SC9","SE4","SB1","SB2","SF4","SF2"}
 
	Local cCarga    := ""
    Local cFil      := ""
	Local cNumDoc   := ""
	Local cTipRem   := ""
	Local cTipPed, cIdMovRM
    Local _cFilBkp := ""
    Local cDoc      := ""
    Local nTPJOB	:= ""

    //Se o dicionario estiver aberto, ira preparar o ambiente
    If Select("SX2") <= 0
        RpcSetType(3)
        RPCSetEnv(cAutoEmp, cAutoFil, "", "", cAutoAmb , "", aTables, , , ,)
    EndIf

   _cFilBkp  := cFilAnt
           
	cMsgProc := ""
	SF2->(dbSetOrder(1))


        IF SELECT ("TMPZZ1") > 0
            TMPZZ1->( dbCloseArea( ) )
        ENDIF	
        
        BeginSql Alias  "TMPZZ1"
    
            %noparser%
            
            SELECT 
               ZZ1.R_E_C_N_O_ AS RECZZ1
               ZZ1.ZZ1_CHAVE  AS CHAVE,
               ZZ1.ZZ1_NUMCTE AS DOC,
               ZZ1.ZZ1_SERCTE AS SERIE,
               ZZ1.ZZ1_STATUS AS INTEGRA,
               ZZ1.ZZ1_XML    AS XMLCTE,
               ZZ1.ZZ1_FILIAL AS FILIAL,
               ZZ1.ZZ1_HORA   AS HR_INT,
               ZZ1.ZZ1_DATA   AS DT_INT
            FROM %TABLE:ZZ1% ZZ1
            WHERE ZZ1.%NOTDEL%
                    AND	ZZ1.ZZ1_STATUS = %Exp:'A'%
                    AND ZZ1.ZZ1_CGC    = %Exp:' '%
                  
        EndSql
      
    	MEMOWRITE("C:\TEMP\LOSF0002.sql",GETLASTQUERY()[2]) 	

        DbSelectArea('TMPZZ1')
        TMPZZ1->(DbGoTop())
       
        While !TMPZZ1->(Eof()) 
           
            ZZ1->(DbGoTo(nRecZZ1))
            cXml := ZZ1->XMLCTE
          
            //Transforma o CTE em um objeto
            oXml := XmlParser( cXml, "_", @cError, @cWarning )
                    
            If ValType(oXml) != "O"
                cErrorN := 'xml nao pode ser convertido em objeto'
                Return(.f.)
            Endif
            
            lRetorno := XMLCTE(oXml,@cNota, @cError ,nTipo)
        
            If lRetorno
                lRetorno :=  LOSF0003(p_cCodCli,pcLoja,pnVlr,pnVunit,pnTotal)
            Endif
       
            cFilAnt := TMPZZ1->FILIAL 
            cCarga  := TMPZZ1->CARGA
            cFil    := TMPZZ1->FILIAL   
       
            While !_TRB->(Eof()) 

                aPvlDocS := {}
                nPrcVen := 0	    
                cSerie  := "1"
                cEmbExp := ""	    
                cC5Num  := AllTrim(_TRB->PEDIDO)
                cNumDoc:= Avkey(_TRB->F2_DOC,"F2_DOC")

                DbSelectArea("SC5") 
                SC5->(DbSetOrder(1))
                SC5->(MsSeek(xFilial("SC5")+cC5Num))
               
                SC6->(dbSetOrder(1))
                SC6->(MsSeek(xFilial("SC6")+SC5->C5_NUM))

                Pergunte("MT460A",.F.)
                
                aPvlDocS := {}

                // Obter os dados de cada item do pedido de vendas liberado para gerar o Documento de Saï¿½da
                While SC6->(!Eof() .And. SC6->C6_FILIAL == xFilial("SC6")) .And. SC6->C6_NUM == SC5->C5_NUM 
        
                    SC9->(DbSetOrder(12))
                    SC9->(MsSeek(xFilial("SC9")+alltrim(cCarga)+SC6->(C6_NUM+C6_ITEM))) //FILIAL+NUMERO+ITEM

                    SE4->(DbSetOrder(1))
                    SE4->(MsSeek(xFilial("SE4")+SC5->C5_CONDPAG) )  //FILIAL+CONDICAO PAGTO

                    SB1->(DbSetOrder(1))
                    SB1->(MsSeek(xFilial("SB1")+SC6->C6_PRODUTO))    //FILIAL+PRODUTO

                    SB2->(DbSetOrder(1))
                    SB2->(MsSeek(xFilial("SB2")+SC6->(C6_PRODUTO+C6_LOCAL))) //FILIAL+PRODUTO+LOCAL

                    SF4->(DbSetOrder(1))
                    SF4->(MsSeek(xFilial("SF4")+SC6->C6_TES))   //FILIAL+TES

                    nPrcVen := SC9->C9_PRCVEN
                    If ( SC5->C5_MOEDA <> 1 )
                        nPrcVen := xMoeda(nPrcVen,SC5->C5_MOEDA,1,dDataBase)
                    EndIf
    
                    If Empty(SC6->C6_NOTA) .and. AllTrim(SC9->C9_PEDIDO) == ALLTRIM(_TRB->PEDIDO) .AND.  SC9->C9_CARGA = cCarga
                        AAdd(aPvlDocS,{ SC9->C9_PEDIDO,;
                            SC9->C9_ITEM,;
                            SC9->C9_SEQUEN,;
                            SC9->C9_QTDLIB,;
                            nPrcVen,;
                            SC9->C9_PRODUTO,;
                            .F.,;
                            SC9->(RecNo()),;
                            SC5->(RecNo()),;
                            SC6->(RecNo()),;
                            SE4->(RecNo()),;
                            SB1->(RecNo()),;
                            SB2->(RecNo()),;
                            SF4->(RecNo())})
                    EndIf
                      
                    SC6->(DbSkip())
                EndDo

                SetFunName("MATA461")	
                
                cDoc := MaPvlNfs(  /*aPvlNfs*/         aPvlDocS,;  // 01 - Array com os itens a serem gerados 
                             /*cSerieNFS*/       cSerie,;    // 02 - Serie da Nota Fiscal
                             /*lMostraCtb*/      .F.,;       // 03 - Mostra Lanï¿½amento Contï¿½bil
                             /*lAglutCtb*/       .F.,;       // 04 - Aglutina Lanï¿½amento Contï¿½bil
                            /*lCtbOnLine*/      .F.,;       // 05 - Contabiliza On-Line
                            /*lCtbCusto*/       .T.,;       // 06 - Contabiliza Custo On-Line
                            /*lReajuste*/       .F.,;       // 07 - Reajuste de preï¿½o na Nota Fiscal
                            /*nCalAcrs*/        0,;         // 08 - Tipo de Acrï¿½scimo Financeiro
                            /*nArredPrcLis*/    0,;         // 09 - Tipo de Arredondamento
                            /*lAtuSA7*/         .T.,;       // 10 - Atualiza Amarraï¿½ï¿½o Cliente x Produto
                            /*lECF*/            .F.,;       // 11 - Cupom Fiscal
                           /*cEmbExp*/         cEmbExp,;   // 12 - Nï¿½mero do Embarque de Exportaï¿½ï¿½o
                            /*bAtuFin*/         {||},;      // 13 - Bloco de Cï¿½digo para complemento de atualizaï¿½ï¿½o dos tï¿½tulos financeiros
                            /*bAtuPGerNF*/      {||},;      // 14 - Bloco de Cï¿½digo para complemento de atualizaï¿½ï¿½o dos dados apï¿½s a geraï¿½ï¿½o da Nota Fiscal
                             /*bAtuPvl*/         {||},;      // 15 - Bloco de Cï¿½digo de atualizaï¿½ï¿½o do Pedido de Venda antes da geraï¿½ï¿½o da Nota Fiscal
                           /*bFatSE1*/         {|| .T. },; // 16 - Bloco de Cï¿½digo para indicar se o valor do Titulo a Receber serï¿½ gravado no campo F2_VALFAT quando o parï¿½metro MV_TMSMFAT estiver com o valor igual a "2".
                           /*dDataMoe*/        dDatabase,; // 17 - Data da cotaï¿½ï¿½o para conversï¿½o dos valores da Moeda do Pedido de Venda para a Moeda Forte
                           /*lJunta*/          .F.)       // 18 - Aglutina Pedido Iguais
                            


                If !Empty(cDoc)
                    U_FSWMSP01(AllTrim(_TRB->F2_DOC),FwGetUserName(RetCodUsr()),"B2CFAT","I","Documento de Saï¿½da: " + cSerie + "-" + cDoc + ", gerado com sucesso via job.","")
                EndIf

       TMPZZ1->(dbSkip()) 
       cFilAnt := _cFilBkp
    
    Enddo
   
    DbCloseArea()

    FWRestArea(aArea)
 
    RpcClearEnv() //Encerra o ambiente, fechando as devidas conexï¿½es
 
Return .T.



/*/{Protheus.doc} XMLCTE
    (long_description)
    @type  Static Function
    @author user
    @since 20/10/2025
    @version version
    @param param_name, param_type, param_descr
    @return return_var, return_type, return_description
    @example
    (examples)
    @see (links_or_references)
/*/
Static Function XMLCTE(oXml,cNotaG,cXmlRec,nChama)

Local lRet          := .T.
Local lRetorno      := .F.
Local nCont         := 0
Local lLancado      := .F.
Private cFilorig    := '' 
Private cEspecie    := "CTE"
Private cVersaoCTE  := ''
Private cChave_Nfe  := ''
Private cCNPJ_FIL   := ''
Private cNatOp      := ''
Private cCNPJ_TOM   := ''
Private cNum        := ''
Private cSerie      := ''
Private cDtEmissao  := ''
Private cHrEmissao  := ''
Private cCfopFrt    := ''
Private cEstIni     := ''
Private cEstFim     := ''
Private cTesCTe     := ''
Private cCodCli     := ''
Private cLjFornec   := ''
Private cTipoCli    := ''
Private aCSTTipo    := ""
Private cCstCte     := ''
Private cMunIni     := ''
Private cMunFim     := ''
Private cEstFil     := ''
Private cEstTom     := ''
Default nChama      := 0
Private cMunIniCTE  := ""
Private cMunFimCTE  := ""
Private cChaveCTE   := ""


If ValType(oXml) != "O"
    cErrorN := 'xml nao pode ser convertido em objeto'
    Return(.f.)
Endif

cVersaoCTE := oXML:_CTEProc:_versao:TEXT  

cChave_Nfe := SubStr(oxml:_CTEPROC:_CTE:_INFCTE:_ID:TEXT,4)

If Empty(cChave_Nfe)
	cErrorN := 'Chave de acesso do CTe não informada'
	Return(.f.)
EndIf     

If XmlChildEx( oXml:_CTEPROC:_CTE:_INFCTE:_EMIT, "_CNPJ" ) != Nil
    cCNPJ_FIL := oxml:_CTEPROC:_CTE:_INFCTE:_EMIT:_CNPJ:TEXT 
EndIF 

aSm0 := FWLoadSM0()
nPos := Ascan(aSM0,{|x| Alltrim(x[18]) == Alltrim(cCNPJ_FIL)})			
//nPos := 1
cFilorig := aSm0[nPos,02] //SM0->M0_CODFIL
cfilant := cFilorig

If XmlChildEx( oXml:_CTEPROC:_CTE:_INFCTE:_EMIT, "_ENDEREMIT" ) != Nil
    cEstFil := UPPER(oxml:_CTEPROC:_CTE:_INFCTE:_EMIT:_ENDEREMIT:_UF:TEXT )
EndIF 

cNatOp	:= PadR(oXml:_cteProc:_cte:_Infcte:_IDE:_NATOP:Text,45," ")

//Busca pelo cnpj do Tomador 

If XmlChildEx( oXml:_CTEPROC:_CTE:_INFCTE:_IDE, "_TOMA4" ) <> NIL
    cCNPJ_TOM := oXml:_CTEPROC:_CTE:_INFCTE:_IDE:_TOMA4:_CNPJ:TEXT
    cEstTom   := UPPER(oXml:_CTEPROC:_CTE:_INFCTE:_IDE:_TOMA4:_ENDERTOMA:_UF:TEXT)
ElseIF XmlChildEx( oXml:_CTEPROC:_CTE:_INFCTE, "_REM" ) <> NIL 
    If XmlChildEx( oXml:_CTEPROC:_CTE:_INFCTE:_REM, "_CNPJ" ) <> NIL
        cCNPJ_TOM := oXml:_CTEPROC:_CTE:_INFCTE:_REM:_CNPJ:TEXT 
    Elseif XmlChildEx( oXml:_CTEPROC:_CTE:_INFCTE:_REM, "_CPF" ) <> NIL
        cCNPJ_TOM := oXml:_CTEPROC:_CTE:_INFCTE:_REM:_CPF:TEXT 
    EndIf 

    cEstTom   := UPPER(oXml:_CTEPROC:_CTE:_INFCTE:_REM:_ENDERREME:_UF:TEXT)
EndIf 


cNum	:= PadL(Alltrim(oXml:_CTEPROC:_CTE:_INFCTE:_IDE:_NCT:TEXT),9,"0") //Nro da Nota
cSerie	:= PadR(oXml:_CTEProc:_CTE:_InfCTE:_IDE:_Serie:Text,3," ")
cNotaG  := cNum

cDtEmissao	:= oXml:_CTEPROC:_CTE:_INFCTE:_IDE:_dhEmi:Text
cHrEmissao  := substr(cDtEmissao,12,5)
cDtEmissao	:= Substr(cDtEmissao,9,2)+"/"+Substr(cDtEmissao,6,2)+"/"+Substr(cDtEmissao,1,4)
            
nTotalMerc      := Val(oXml:_CTEPROC:_CTE:_INFCTE:_VPREST:_VTPREST:Text)

If XmlChildEx( oXml:_CTEPROC:_CTE:_INFCTE:_IDE, "_CFOP" ) != Nil
    cCfopFrt := oXml:_CTEPROC:_CTE:_INFCTE:_IDE:_CFOP:TEXT 
EndIF

If XmlChildEx( oXml:_CTEPROC:_CTE:_INFCTE:_IDE, "_UFINI" ) != Nil //<UFIni>SP</UFIni>
    cEstIni := upper(oXml:_CTEPROC:_CTE:_INFCTE:_IDE:_UFINI:TEXT)
ENDIF

If XmlChildEx( oXml:_CTEPROC:_CTE:_INFCTE:_IDE, "_UFFIM" ) != Nil //<UFFim>RJ</UFFim>
    cEstFim := upper(oXml:_CTEPROC:_CTE:_INFCTE:_IDE:_UFFIM:TEXT)
ENDIF

// Pega municipio de origem e destino da carga gravo da SF2 para ser utilizado no sped D100
If XmlChildEx( oXml:_CTEPROC:_CTE:_INFCTE:_IDE, "_CMUNINI" ) != Nil //<cMunIni>3550308</cMunIni>
    cMunIniCTE := oXml:_CTEPROC:_CTE:_INFCTE:_IDE:_CMUNINI:TEXT
EndIf 

If XmlChildEx( oXml:_CTEPROC:_CTE:_INFCTE:_IDE, "_CMUNFIM" ) != Nil //<cMunFim>3304557</cMunFim>
    cMunFimCTE := oXml:_CTEPROC:_CTE:_INFCTE:_IDE:_CMUNFIM:TEXT
EndIf 

If XmlChildEx( oXml:_CTEPROC:_CTE:_INFCTE:_EMIT:_ENDEREMIT, "_CMUN" ) != Nil 
    cMunIni := oXml:_CTEPROC:_CTE:_INFCTE:_EMIT:_ENDEREMIT:_CMUN:TEXT
EndIf 

If XmlChildEx( oXml:_CTEPROC:_CTE:_INFCTE:_DEST:_ENDERDEST, "_CMUN" ) != Nil 
    cMunFim := oXml:_CTEPROC:_CTE:_INFCTE:_DEST:_ENDERDEST:_CMUN:TEXT
EndIf 

DBSelectArea("SA1")
DBSetOrder(3)
If DbSeek(xFilial("SA1")+cCNPJ_TOM)
	cCodCli		:= SA1->A1_COD
	cLjFornec	:= SA1->A1_LOJA
    cTipoCli    := SA1->A1_PESSOA
Else
    CadSA1(oXml,oXml:_CTEPROC:_CTE:_INFCTE:_DEST:_ENDERDEST)
Endif

Return(_lRet)

/*/{Protheus.doc} CadSA1
    (long_description)
    @type  Static Function
    @author Andre Vicente
    @since 18/10/2025
    @version version
    @param param_name, param_type, param_descr
    @return return_var, return_type, return_description
    @example
    (examples)
    @see (links_or_references)
/*/
Static Function CadSA1(oBjt,oEndre)

	Local oModel	:= Nil
	Local oView		:= Nil
	Local cCNPJ		:= ""
	Local cIE		:= ""
	Local cFantasia	:= ""
	Local cRazao	:= ""
	
	Local cCep		:= ""
	Local cCodMun	:= ""
	Local cCodPais	:= ""
	Local cCodTel	:= ""
	Local cNumero	:= ""
	Local cUF		:= ""
	Local cBairro	:= ""
	Local cEndereco	:= ""
	Local cMuncipio	:= ""
	Local cCodRegiao := ""
		
	
    If AttIsMemberOf(oBjt,"_CNPJ") 
        cCNPJ :=  Upper(AllTrim(oBjt:_CNPJ:Text))
    End If

    If AttIsMemberOf(oBjt,"_IE") 
        cIE   :=  Upper(AllTrim(oBjt:_IE:Text))
    End If
    
    If AttIsMemberOf(oBjt,"_XNOME") 
        cRazao  :=  Upper(AllTrim(oBjt:_XNOME:Text))
    End If

    If AttIsMemberOf(oBjt,"_XFANT") 
        cFantasia  :=  Upper(AllTrim(oBjt:_XFANT:Text))
    Else
        cFantasia := cRazao
    End If
    
    If AttIsMemberOf(oEndre,"_CEP") 
        cCEP  :=  Upper(AllTrim(oEndre:_CEP:Text))
    End If
    
  	If AttIsMemberOf(oEndre,"_XMUN") 
        cMuncipio  :=  Upper(AllTrim(oEndre:_XMUN:Text))
    End If

	If AttIsMemberOf(oEndre,"_XBAIRRO") 
        cBairro  :=  Upper(AllTrim(oEndre:_XBAIRRO:Text))
    End If

	If AttIsMemberOf(oEndre,"_UF") 
        cUF  :=  Upper(AllTrim(oEndre:_UF:Text))
    End If

	If AttIsMemberOf(oEndre,"_NRO") 
        cNumero  :=  Upper(AllTrim(oEndre:_NRO:Text))
    End If
    
    If AttIsMemberOf(oEndre,"_XLGR") 
        cEndereco  :=  Upper(AllTrim(oEndre:_XLGR:Text)) + "," + cNumero
    End If
	
	If AttIsMemberOf(oEndre,"_FONE") 
        cCodTel  :=  Upper(AllTrim(oEndre:_FONE:Text))
    End If
	
	If AttIsMemberOf(oEndre,"_CPAIS") 
        cCodPais  :=  Upper(AllTrim(oEndre:_CPAIS:Text))
    End If
    
	If AttIsMemberOf(oEndre,"_CMUN") 
        cCodMun  :=  Upper(AllTrim(oEndre:_CMUN:Text))
    End If  
    
    oModel := FWLoadModel("CRMA980")
    oModel:SetOperation(MODEL_OPERATION_INSERT)
    oModel:Activate()
    
    oModel:SetValue('SA1MASTER', 'A1_COD'  	  , GETSXENUM("SA1", "A1_COD"))
    oModel:SetValue('SA1MASTER', 'A1_LOJA'    , "01")
    oModel:SetValue('SA1MASTER', 'A1_PESSOA'  , IIF(LEN(cCNPJ) == 14, "J", "F"))
    oModel:SetValue('SA1MASTER', 'A1_TIPO'    , "F")
    oModel:SetValue('SA1MASTER', 'A1_CGC'     , cCNPJ)
    oModel:SetValue('SA1MASTER', 'A1_NOME'    , Substr(cRazao,1,TAMSX3("A1_NOME")[1]))
    oModel:SetValue('SA1MASTER', 'A1_NREDUZ'  , Substr(cFantasia,1,TAMSX3("A1_NREDUZ")[1]))
    oModel:SetValue('SA1MASTER', 'A1_END'     , Substr(cEndereco,1,TAMSX3("A1_END")[1]))
    oModel:SetValue('SA1MASTER', 'A1_BAIRRO'  , Substr(cBairro,1,TAMSX3("A1_BAIRRO")[1]))
    oModel:SetValue('SA1MASTER', 'A1_EST'     , cUF)
    oModel:SetValue('SA1MASTER', 'A1_MUN'     , Substr(cMuncipio,1,TAMSX3("A1_MUN")[1]))
    oModel:SetValue('SA1MASTER', 'A1_COD_MUN' , Substr(cCodMun,3,TAMSX3("A1_COD_MUN")[1]))
    oModel:SetValue('SA1MASTER', 'A1_CEP'     , Substr(cCEP,1,TAMSX3("A1_CEP")[1]))
    oModel:SetValue('SA1MASTER', 'A1_DDD'     , Substr(cCodTel,1,2))
    oModel:SetValue('SA1MASTER', 'A1_TEL'     , Substr(cCodTel,3,TAMSX3("A1_TEL")[1]))
    oModel:SetValue('SA1MASTER', 'A1_INSCR'   , Substr(cIE,1,TAMSX3("A1_INSCR")[1]))
    oModel:SetValue('SA1MASTER', 'A1_CDRDES'  , cCodRegiao)
    oModel:SetValue('SA1MASTER', 'A1_CODPAIS' , "01058")
       
Return
